# dbt_project.yml
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_project'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'dbt_project'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  dbt_project:
    staging:
      # +schema: public # Ephemeral models don't actually get built in the database. So the schema override (+schema: public) is ignored during execution — because there's no physical schema or table to create.
      +materialized: ephemeral
    dw:
      +schema: dw_schema
      +materialized: incremental
      dim_customers_historical_load_control: 
        pre-hook: "{{ truncate_if_full_mode(this) }}"

  ## elementary models will be created in the schema '<your_schema>_elementary'
  ## for details, see docs: <https://docs.elementary-data.com/>
  elementary: 
    ## elementary models will be created in the schema '<your_schema>_elementary'
    ### our target.schema is also public so if we want to put Elementary models into the exact public schema, we can omit +schema: public
    +schema: public # (or write elementary if we want public_elementary)  
    ## To disable elementary for dev, uncomment this:
    # enabled: "{{ target.name in ['prod','analytics'] }}"

    # If you change materialization settings, make sure to run dbt run -s elementary --full-refresh.

# Allowing Elementary to override dbt's default materializations (relevant from dbt 1.8)
# https://docs.elementary-data.com/oss/quickstart/quickstart-cli-package#important-allowing-elementary-to-override-dbts-default-materializations-relevant-from-dbt-1-8
flags:
  require_explicit_package_overrides_for_builtin_materializations: false # "It’s okay if a package like Elementary wants to override built-in behavior (like how tests are materialized). I approve."
  # Allows Elementary to override dbt’s default test behavior to collect failed row counts & row samples for better observability (Capture row-level test failures, Override how test materialization works, Provide richer test logging and alerting).
  source_freshness_run_project_hooks: True # optional, helps freshness hooks trigger
  # Hey, even when I run dbt source freshness, still execute hooks like you would during dbt run or dbt test
  # Which means:
  #   Elementary can collect and store freshness results
  #   Alerts/views like alerts_dbt_source_freshness will work
  #   Your data observability stays complete
  # Elementary tables/views that depend on it:
  #   dbt_source_freshness_results (table)
  #   alerts_dbt_source_freshness (view)


snapshots:
  dbt_project:
    +schema: snapshot   # snapshots go to snapshot schema

seeds: 
  dbt_project:
    customers_data: # folder inside seeds: dbt seed --select test_data --target dev
      # +schema: public # we commented out the custom seed schema because it created double public_public issue. 
      # When both the target schema and +schema override are the same (e.g., both public), dbt doesn't merge them — it concatenates them (target.schema + custom override like public_public).
      # Only use +schema: if you want to override the schema to something different from your target profile schema.
      +quote_columns: false # prevents quoting columns names like "customer_id"


on-run-end: 
  - "{{ update_load_status_from_results(results) }}"