Adding Elementary gives you:

📊 Visual history of dbt test results
⏱ Tracking of model run time, row counts, and freshness
🧠 Alerting and detection of schema or volume anomalies
📥 HTML reports you can review or share
🔔 Alerts (Slack/email/webhook) when something breaks



# 1. Build Elementary dbt models
dbt run --select elementary
dbt run --select elementary just builds the Elementary monitoring models/tables in your warehouse (like elementary_test_results, alerts_dbt_tests, etc.).
This will mostly create empty tables, that will be updated with artifacts, metrics and test results in your future dbt executions.
It does NOT collect test results.
You only need to run dbt run --select elementary:
When you're setting up Elementary for the first time
After upgrading the Elementary package
After changing Elementary configs
Occasionally, to make sure the metadata tables exist and are updated
But it’s not needed before every run.


# 2. Run normal dbt flow
dbt seed
dbt run
dbt test: After you ran your tests, we recommend that you ensure that the results were loaded to elementary_test_results table.
dbt snapshot

# 3. Monitor
edr monitor --dbt-project-dir . --warehouse-type postgres

# 4. Open the HTML report!


You ran dbt test → this generated the run_results.json file.
Elementary's on-run-end hook (already wired into the package) ran automatically as part of dbt test and:
    Extracted the test results
    Uploaded them directly into elementary_test_results


Even though your test results are already uploaded, running:
edr monitor --warehouse-type postgres
still gives you major benefits:

Generates the full HTML report (locally)

Collects schema diffs, volume metrics, freshness, anomaly detection

Updates views like alerts_dbt_tests, alerts_schema_changes, etc.

So it’s recommended for:

Daily observability monitoring

Manual inspection and debugging

Generating dashboards or reports


######## ELEMENTARY TABLES ##############
| Table Type                        | Replaces Data Every Run? | Stores History?            | Examples                                                        |
| -------------------               | ------------------------ | ------------               | --------------------------------------------------------------- |
|Metadata Models(dbt_artifacts)     | ✅ Yes                    | ❌ No                      | `dbt_models`, `dbt_columns`, dbt_tests                                     |
|Result Models (run results)        | ❌ No                     | ✅ Yes (incremental)       | `dbt_run_results`, `elementary_test_results`, `dbt_invocations` |

✅ You can track test failures, model durations, freshness, etc. over time — because those are in result models.
⚠️ You cannot see past versions of model definitions or columns — because metadata models just show the latest version.

##### Elementary CLI (edr): #####
https://docs.elementary-data.com/oss/quickstart/quickstart-cli#what-permissions-are-required-for-the-elementary-profile
Postgres: pip install elementary-data
Snowflake: pip install 'elementary-data[snowflake]'

edr report --env dev
- The command will use the provided connection profile to access the data warehouse, 
  read from the Elementary tables, and generate the report as an HTML file.
